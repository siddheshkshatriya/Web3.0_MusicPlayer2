import { Button, Card, Loading, Text, Textarea } from '@nextui-org/react';
import { darkTheme, SwapWidget } from '@uniswap/widgets';
import { ethers } from 'ethers';
import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useEffect, useMemo, useRef, useState } from 'react';
import Navbar from '../components/Navbar';
import { SONG_ADDRESSES, SONG_CONTRACTS } from '../constants';
import { useAuth } from '../context/AuthContext';
import useBiconomy from '../hooks/useBiconomy';
import useWalletBalance from '../hooks/useWalletBalance';

const jsonRpcUrlMap = {
  80001: [
    `https://polygon-mumbai.g.alchemy.com/v2/${process.env.NEXT_PUBLIC_ALCHEMY_API_KEY}`
  ]
};

const SongScreen = () => {
  const Router = useRouter();
  const { query, isReady } = Router;

  const { provider, signerAddress, getSigner, isConnected, getWalletAddress } =
    useAuth();

  const songAddress = useMemo(() => query.address, [isReady, query]);

  const [songCoverURL, setSongCoverURL] = useState<string>('');
  const [songTitle, setSongTitle] = useState('');
  const [songArtist, setSongArtist] = useState('');
  const [spotifyURI, setSpotifyURI] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [tokenName, setTokenName] = useState('');
  const [tokenSymbol, setTokenSymbol] = useState('');
  const [tokenBalance, setTokenBalance] = useState(0);
  const [isButtonDisabled, setIsButtonDisabled] = useState(true);
  const [discussions, setDiscussions] = useState<any[]>([]);
  const [isPosting, setIsPosting] = useState(false);

  const textAreaRef = useRef<any>(null);

  const { fetchTokenBalance } = useWalletBalance();
  const { postDiscussion, fetchDiscussions } = useBiconomy();

  useEffect(() => {
    if (!isReady) return;

    const onLoad = async () => {
      const tokenContract = new ethers.Contract(
        songAddress as string,
        SONG_CONTRACTS[SONG_ADDRESSES.indexOf(songAddress as string)].abi,
        provider
      );

      const title = await tokenContract.songName();
      const artist = await tokenContract.artistName();
      const geniusID = await tokenContract.geniusID();
      const name = await tokenContract.name();
      const symbol = await tokenContract.symbol();
      const _spotifyURI = await tokenContract.spotifyURI();

      setSongTitle(title);
      setSongArtist(artist);
      setTokenName(name);
      setTokenSymbol(symbol);
      setSpotifyURI(_spotifyURI);

      const res = await fetch(
        // @ts-ignore
        `/api/genius-song?geniusID=${geniusID}`
      );
      const data = await res.json();
      const imgURL = data.coverImgURL;
      setSongCoverURL(imgURL);

      const fetchedDiscussions = await fetchDiscussions(songAddress as string);
      setDiscussions([...fetchedDiscussions]);
    };

    onLoad();
  }, [isReady]);

  useEffect(() => {
    if (!isReady || !signerAddress) return;

    const calculateHoldings = async () => {
      setIsLoading(true);

      const [title, balance] = await fetchTokenBalance(
        songAddress as string,
        SONG_CONTRACTS[SONG_ADDRESSES.indexOf(songAddress as string)].abi,
        signerAddress
      );

      setTokenBalance(balance);
    };

    calculateHoldings();
  }, [isReady, signerAddress]);

  async function addDiscussion() {
    textAreaRef.current.value = '';
    setIsPosting(true);
    await postDiscussion(songAddress as string, textAreaRef.current.value);
    const fetchedDiscussions = await fetchDiscussions(songAddress as string);
    setDiscussions([...fetchedDiscussions]);
    setIsPosting(false);
  }

  return (
    <div className="min-h-screen">
      <Head>
        <title>{songTitle} | Finesse</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar />

      <div className="py-8 px-24 flex flex-row">
        <div className="w-3/4 px-12">
          <div className="flex flex-row">
            {songCoverURL && songCoverURL.length > 0 && (
              <div>
                <Image
                  alt="Artist photo"
                  src={songCoverURL}
                  width={180}
                  height={180}
                  className="rounded-lg"
                />
              </div>
            )}
            <div className="pl-10 flex-1 flex flex-row justify-between items-center">
              <div>
                <Text h1>{songTitle}</Text>
                <Link
                  color="secondary"
                  href={`/artist/${songArtist.replace(' ', '-')}`}
                >
                  <Text color="secondary" h4 className="hover:underline">
                    {songArtist}
                  </Text>
                </Link>
              </div>
              {isConnected() && (
                <div className="flex flex-col">
                  <Text h2>
                    {tokenBalance} {tokenSymbol}
                  </Text>
                </div>
              )}
            </div>
          </div>

          <div className="mt-12">
            <Text h3>Discussions</Text>
            {isConnected() &&
              (isPosting ? (
                <Loading />
              ) : (
                <div className="w-full flex items-center">
                  <Textarea
                    className="flex-1"
                    onChange={(e) => {
                      if (e.target.value === '') setIsButtonDisabled(true);
                      else setIsButtonDisabled(false);
                    }}
                    ref={textAreaRef}
                    width="100%"
                    label="Write your thoughts"
                    placeholder="Start a discussion around this song..."
                  />
                  <Button
                    color="secondary"
                    className="ml-4"
                    size="md"
                    disabled={isButtonDisabled}
                    onClick={addDiscussion}
                  >
                    Post
                  </Button>
                </div>
              ))}
            <div className="py-2 px-4">
              {discussions
                .slice(0)
                .reverse()
                .map((dc) => {
                  return (
                    <div
                      className="my-4"
                      key={Number(ethers.utils.formatEther(dc.id))}
                    >
                      <Card>
                        <Card.Header>
                          <Text h6 color="secondary">
                            {dc.author}
                          </Text>
                        </Card.Header>
                        <Card.Body>
                          <Text h4>{dc.text}</Text>
                        </Card.Body>
                        {/* <Card.Footer>
                          TODO: Fix absurd timestamp
                          {formatSolidityTimestamp(dc.createdAt)}
                        </Card.Footer> */}
                      </Card>
                    </div>
                  );
                })}
            </div>
          </div>
        </div>
        <div className="w-1/4 flex flex-col items-center">
          {tokenName && tokenSymbol && (
            <div className="Uniswap">
              <SwapWidget
                theme={darkTheme}
                provider={provider}
                jsonRpcUrlMap={jsonRpcUrlMap}
                tokenList={[
                  {
                    name: 'Wrapped Matic',
                    address: process.env.NEXT_PUBLIC_WMATIC_ADDRESS as string,
                    symbol: 'WMATIC',
                    decimals: 18,
                    chainId: 80001,
                    logoURI:
                      'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x6B175474E89094C44Da98b954EedeAC495271d0F/logo.png'
                  },
                  {
                    name: tokenName,
                    address: songAddress as string,
                    symbol: tokenSymbol,
                    decimals: 18,
                    chainId: 80001,
                    logoURI:
                      'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x6B175474E89094C44Da98b954EedeAC495271d0F/logo.png'
                  }
                ]}
                defaultInputTokenAddress={
                  process.env.NEXT_PUBLIC_WMATIC_ADDRESS
                }
                defaultOutputAmount={1}
                defaultOutputTokenAddress={songAddress}
              />
            </div>
          )}
          {spotifyURI && (
            <div className="mt-12">
              <iframe
                style={{ borderRadius: '12px' }}
                src={`https://open.spotify.com/embed/track/${spotifyURI}?utm_source=generator&theme=0`}
                width="100%"
                height="352"
                frameBorder="0"
                allowFullScreen
                allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
                loading="lazy"
              ></iframe>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default SongScreen;
