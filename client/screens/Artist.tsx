import { Loading, Text } from '@nextui-org/react';
import { ethers } from 'ethers';
import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { ToastContainer } from 'react-toastify';
import ArtistFileInput from '../components/ArtistFileInput';
import BronzeTierCard from '../components/BronzeTierCard';
import DiamondTierCard from '../components/DiamondTierCard';
import GoldTierCard from '../components/GoldTierCard';
import IronTierCard from '../components/IronTierCard';
import Navbar from '../components/Navbar';
import PlatinumTierCard from '../components/PlatinumTierCard';
import SilverTierCard from '../components/SilverTierCard';
import {
  ARTIST_GENIUS_IDs,
  SONG_ADDRESSES,
  SONG_ARTISTS_KEYS,
  SONG_CONTRACTS
} from '../constants';
import { useAuth } from '../context/AuthContext';
import useWalletBalance from '../hooks/useWalletBalance';

const ArtistScreen = () => {
  const Router = useRouter();
  const { query, isReady } = Router;

  const { provider, signerAddress } = useAuth();

  const artistName = query.name?.toString().replace('-', ' ');

  const [artistImageURL, setArtistImageURL] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  const [artistHoldings, setArtistHoldings] = useState<IArtistHolding[]>([]);
  const [artistAddress, setArtistAddress] = useState('');
  const [isArtistVerified, setIsArtistVerified] = useState(false);
  const [isClaimingAnyTier, setIsClaimingAnyTier] = useState(false);
  const [unreleasedSongURL, setUnreleasedSongURL] = useState('');

  const { fetchTokenBalance } = useWalletBalance();

  useEffect(() => {
    if (!isReady) return;

    const onLoad = async () => {
      const res = await fetch(
        // @ts-ignore
        `/api/genius-artist?geniusID=${ARTIST_GENIUS_IDs[query.name as string]}`
      );
      const data = await res.json();
      const imgURL = data.imgURL;

      setArtistImageURL(imgURL);

      // @ts-ignore
      const artistIndex = SONG_ARTISTS_KEYS.indexOf(query.name as string);

      const tokenContract = new ethers.Contract(
        SONG_ADDRESSES[artistIndex] as string,
        SONG_CONTRACTS[artistIndex].abi,
        provider
      );

      const _isArtistVerified = await tokenContract.isArtistVerified();
      const _artistAddress = await tokenContract.artistAddress();
      const _unreleasedSongURL = await tokenContract.unreleasedSongURL();

      setIsArtistVerified(_isArtistVerified);
      setArtistAddress(_artistAddress);
      setUnreleasedSongURL(_unreleasedSongURL);
    };

    onLoad();
  }, [isReady]);

  useEffect(() => {
    if (!isReady || !signerAddress) return;

    const calculateHoldings = async () => {
      setIsLoading(true);

      let index = 0;
      const holdings = [];
      for await (const artistKey of SONG_ARTISTS_KEYS) {
        if (artistKey === query.name) {
          const [title, balance] = await fetchTokenBalance(
            SONG_ADDRESSES[index],
            SONG_CONTRACTS[index].abi,
            signerAddress
          );
          console.log(title, balance);

          const holding: IArtistHolding = {
            balance,
            title,
            address: SONG_ADDRESSES[index]
          };
          holdings.push(holding);
        }
        index++;
      }
      setArtistHoldings([...holdings]);
      setIsLoading(false);
    };

    calculateHoldings();
  }, [isReady, signerAddress]);

  return (
    <div className="min-h-screen">
      <ToastContainer
        position="top-center"
        autoClose={5000}
        hideProgressBar={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="dark"
      />
      <Head>
        <title>{artistName} | Finesse</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar />

      <div className="py-8 px-24 flex flex-row">
        <div className="w-2/3 px-12">
          <div className="flex flex-row">
            {artistImageURL && artistImageURL.length > 0 && (
              <div>
                <Image
                  alt="Artist photo"
                  src={artistImageURL}
                  width={180}
                  height={180}
                  className="rounded-lg"
                />
              </div>
            )}
            <div className="pl-10 flex-1">
              <Text h1>{artistName}</Text>
              {isArtistVerified && artistAddress == signerAddress && (
                <>
                  <Text color="secondary" h4>
                    This is you!
                  </Text>
                  {!unreleasedSongURL && (
                    <ArtistFileInput artistName={artistName as string} />
                  )}
                </>
              )}
            </div>
          </div>

          <div className="mt-12">
            {isClaimingAnyTier ? (
              <Loading />
            ) : (
              <div className="grid grid-cols-2 auto-rows-fr gap-6">
                <IronTierCard
                  artistAddress={artistAddress}
                  artistImageURL={artistImageURL}
                  artistName={artistName as string}
                  isLoading={isLoading}
                  setIsClaimingAnyTier={setIsClaimingAnyTier}
                />
                <BronzeTierCard
                  artistAddress={artistAddress}
                  artistImageURL={artistImageURL}
                  artistName={artistName as string}
                  isLoading={isLoading}
                  setIsClaimingAnyTier={setIsClaimingAnyTier}
                />
                <SilverTierCard
                  artistAddress={artistAddress}
                  unreleasedSongURL={unreleasedSongURL}
                  artistName={artistName as string}
                  isLoading={isLoading}
                />
                <GoldTierCard
                  artistAddress={artistAddress}
                  artistName={artistName as string}
                  isLoading={isLoading}
                />
                <PlatinumTierCard
                  artistAddress={artistAddress}
                  artistName={artistName as string}
                  isLoading={isLoading}
                  isArtistVerified={isArtistVerified}
                />
                <DiamondTierCard
                  artistAddress={artistAddress}
                  artistName={artistName as string}
                  isLoading={isLoading}
                />
              </div>
            )}
          </div>
        </div>
        <div className="w-1/3">
          <div className="mx-4 rounded-lg bg-gray-light min-h-full px-2 py-4 text-center">
            <Text weight="bold" h4>
              Your holdings in {artistName}'s songs
            </Text>
            {isLoading ? (
              <Loading />
            ) : (
              artistHoldings.map((holding) => {
                return (
                  <div className="flex flex-row justify-between items-center bg-gray-lighter my-3 rounded-lg px-6 py-4">
                    <Link color="secondary" href={`/song/${holding.address}`}>
                      <Text
                        weight="bold"
                        className="cursor-pointer hover:underline"
                      >
                        {holding.title}
                      </Text>
                    </Link>
                    <Text
                      weight="extrabold"
                      className="cursor-pointer hover:underline"
                    >
                      {holding.balance}
                    </Text>
                  </div>
                );
              })
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ArtistScreen;

interface IArtistHolding {
  title: string;
  balance: number;
  address: string;
}
